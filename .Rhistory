p <- plot_geo(locationmode = 'USA-states', color = I("red")) %>%
add_markers(
data = air, x = ~long, y = ~lat, text = ~airport,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_trace(
data = group_by(flights, id),
x = ~start_lon, xend = ~end_lon,
y = ~start_lat, yend = ~end_lat,
alpha = 0.3, size = I(1), hoverinfo = "none", inherit = TRUE
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
p
p <- plot_geo(locationmode = 'USA-states', color = I("red")) %>%
add_markers(
data = air, x = ~long, y = ~lat, text = ~airport,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(flights, id),
x = ~start_lon, xend = ~end_lon,
y = ~start_lat, yend = ~end_lat,
alpha = 0.3, size = I(1), hoverinfo = "none", inherit = TRUE
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
p
remove.packages("plotly")
install.packages("plotly)
install.packages("plotly")
library(plotly)
library(dplyr)
install.packages("plotly")
air <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
# flights between airports
flights <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv')
flights$id <- seq_len(nrow(flights))
geo <- list(
scope = 'north america',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
library(plotly)
library(dplyr)
geo <- list(
scope = 'north america',
projection = list(type = 'azimuthal equal area'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
p <- plot_geo(locationmode = 'USA-states', color = I("red")) %>%
add_markers(
data = air, x = ~long, y = ~lat, text = ~airport,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(flights, id),
x = ~start_lon, xend = ~end_lon,
y = ~start_lat, yend = ~end_lat,
alpha = 0.3, size = I(1), hoverinfo = "none", inherit = TRUE
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
p
plot_geo(lat = flights[,c('start_lat', 'end_lat')], lon = flights[,c('start_lon', 'end_lon')]) %>%
add_lines(color = I("blue"), size = I(2))
plot_geo(lat = flights[,c('start_lat', 'end_lat')], lon = flights[,c('start_lon', 'end_lon')]) %>%
add_lines(color = I("blue"), size = I(2)) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
plot_geo(lat = c(40.7127, 51.5072), lon = c(-74.0059, 0.1275)) %>%
add_lines(color = I("blue"), size = I(2))
c(40.7127, 51.5072)
plot_geo(lat = flights[1,c('start_lat', 'end_lat')], lon = flights[1,c('start_lon', 'end_lon')]) %>%
add_lines(color = I("blue"), size = I(2))
flights[1,c('start_lat', 'end_lat')]
flightsflights[1,c('start_lon', 'end_lon')]
flights[1,c('start_lon', 'end_lon')]
class(flights[1,c('start_lat', 'end_lat')])
class(c(40.7127, 51.5072))
plot_geo(lat = as.numeric(flights[1,c('start_lat', 'end_lat')]), lon = as.numeric(flights[1,c('start_lon', 'end_lon')])) %>%
add_lines(color = I("blue"), size = I(2)) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
plot_geo(lat = as.numeric(flights[,c('start_lat', 'end_lat')]), lon = as.numeric(flights[,c('start_lon', 'end_lon')])) %>%
add_lines(color = I("blue"), size = I(2)) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
packageVersion('plotly')
p
p <- plot_geo(locationmode = 'USA-states', color = I("red")) %>%
add_markers(
data = air, x = ~long, y = ~lat, text = ~airport,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(flights[1,], id),
x = ~start_lon, xend = ~end_lon,
y = ~start_lat, yend = ~end_lat,
alpha = 0.3, size = I(1), hoverinfo = "none", inherit = TRUE
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
p
p <- plot_geo(locationmode = 'USA-states', color = I("red")) %>%
add_markers(
data = air, x = ~long, y = ~lat, text = ~airport,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(flights[1:2,], id),
x = ~start_lon, xend = ~end_lon,
y = ~start_lat, yend = ~end_lat,
alpha = 0.3, size = I(1), hoverinfo = "none", inherit = TRUE
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
p
p <- plot_geo(locationmode = 'USA-states', color = I("red")) %>%
add_markers(
data = air, x = ~long, y = ~lat, text = ~airport,
size = ~cnt, hoverinfo = "text", alpha = 0.5
) %>%
add_segments(
data = group_by(flights[1:2,], id),
x = ~start_lon, xend = ~end_lon,
y = ~start_lat, yend = ~end_lat,
alpha = 0.3, size = I(1), hoverinfo = "start_lon", inherit = TRUE
) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
p
flights[1:2,]
c(40.7127, 51.5072)
c(40.7127, 51.5072; 41, 41)
?c
c(1,7:9)
plot_geo(lat = as.numeric(flights[1:2,c('start_lat', 'end_lat')]), lon = as.numeric(flights[1:2,c('start_lon', 'end_lon')])) %>%
add_lines(color = I("blue"), size = I(2)) %>%
layout(
title = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',
geo = geo, showlegend = FALSE, height=800
)
?add_trace
ggplot2::map_data("world", "canada") %>%
group_by(group) %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none") %>%
add_markers(text = ~paste(name, "<br />", pop), hoverinfo = "text",
data = maps::canada.cities) %>%
layout(showlegend = FALSE)
?plot_geo
map_data("world", "canada") %>%
group_by(group) %>%
plot_geo(x = ~long, y = ~lat) %>%
add_markers(size = I(1))
ggplot2::map_data("world", "canada")
head(ggplot2::map_data("world", "canada"))
head(air)
air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none") %>%
# add_markers(text = ~paste(name, "<br />", pop), hoverinfo = "text",
#             data = maps::canada.cities) %>%
layout(showlegend = FALSE)
maps::canada.cities
head(maps::canada.cities)
head(maps::us.cities)
air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none") %>%
add_markers(text = ~paste(name, "<br />", pop), hoverinfo = "text",
data = maps::us.cities) %>%
layout(showlegend = FALSE)
ggplot2::map_data("world", "canada") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none") %>%
add_markers(text = ~paste(name, "<br />", pop), hoverinfo = "text",
data = maps::us.cities) %>%
layout(showlegend = FALSE)
ggplot2::map_data("world", "us") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none") %>%
add_markers(text = ~paste(name, "<br />", pop), hoverinfo = "text",
data = maps::us.cities) %>%
layout(showlegend = FALSE)
ggplot2::map_data("world", "us") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none")
ggplot2::map_data("world", "canada") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none")
ggplot2::map_data("world", "united states") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none")
head(map_data)
head(ggplot2::map_data)
/map_data
?map_data
ggplot2::map_data("us", "us") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none")
ggplot2::map_data("world", "us") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none")
head(ggplot2::map_data("world", "us") )
ggplot2::map_data("world", "usa") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none")
ggplot2::map_data("world", "us")$long
ggplot2::map_data("world", "usa") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none") %>%
add_markers(text = ~paste(name, "<br />", pop), hoverinfo = "text",
data = maps::us.cities) %>%
layout(showlegend = FALSE)
maps::us.cities
ggplot2::map_data("world", "usa") %>%
group_by(group) %>%
#air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none") %>%
add_markers(text = ~paste(name, "<br />", pop), hoverinfo = "text",
data = air) %>%
layout(showlegend = FALSE)
air %>%
plot_ly(x = ~long, y = ~lat) %>%
add_polygons(hoverinfo = "none") %>%
add_markers(text = ~paste(name, "<br />", pop), hoverinfo = "text",
data = air) %>%
layout(showlegend = FALSE)
library(DBI)
library(RMySQL)
library(psych)
mydb <- dbConnect(MySQL(),
user="root", host="localhost", port=3306, password = "19850719@yy")
dbSendQuery(mydb, "CREATE DATABASE if not exists FlightPerformance;")
dbGetQuery(mydb, "use FlightPerformance;")
newData <- dbGetQuery(mydb,  "select DepDel15, Month, DayofMonth, DayofWeek, Carrier, FlightNum,
OriginAirportID, DestAirportID, CRSDepTime, CRSArrTime, Distance
from data1516
where Cancelled != 1 and Diverted != 1
and year = 2016 and month = 1;")
newData$DepDel15  <- as.character(newData$DepDel15)
newData$FlightNum <- as.character(newData$FlightNum)
newData$OriginAirportID <- as.character(newData$OriginAirportID)
newData$DestAirportID <- as.character(newData$DestAirportID)
library(caret)
inTrain  <- createDataPartition(y = newData$DepDel15, p = 0.60, list = FALSE)
training <- newData[inTrain, ]
testing  <- newData[-inTrain, ]
#
ptm <- proc.time()
modFit_glm <- train(DepDel15 ~., method = "glm", data = training,
family="binomial", na.action = na.omit)
glmPre <- predict(modFit_glm, newdata = testing)
proc.time() - ptm
newData <- dbGetQuery(mydb,  "select DepDel15, Month, DayofMonth, DayofWeek, Carrier, FlightNum,
OriginAirportID, DestAirportID, CRSDepTime, CRSArrTime, Distance
from data1516
where Cancelled != 1 and Diverted != 1
and year = 2016 and month = 1;")
mydb <- dbConnect(MySQL(),
user="root", host="localhost", port=3306, password = "19850719@yy")
# mydb <- dbConnect(MySQL(),
#                   user="root", host="localhost", port=3306, password = "data")
dbSendQuery(mydb, "CREATE DATABASE if not exists FlightPerformance;")
dbGetQuery(mydb, "use FlightPerformance;")
mydb <- dbConnect(MySQL(),
user="root", host="localhost", port=3306, password = "19850719@yy")
# mydb <- dbConnect(MySQL(),
#                   user="root", host="localhost", port=3306, password = "data")
dbSendQuery(mydb, "CREATE DATABASE if not exists FlightPerformance;")
dbGetQuery(mydb, "use FlightPerformance;")
newData <- dbGetQuery(mydb,  "select DepDel15, Month, DayofMonth, DayofWeek, Carrier, FlightNum,
OriginAirportID, DestAirportID, CRSDepTime, CRSArrTime, Distance
from data1516
where Cancelled != 1 and Diverted != 1
and year = 2016 and month = 1;")
newData$DepDel15  <- as.character(newData$DepDel15)
newData$FlightNum <- as.character(newData$FlightNum)
library(caret)
inTrain  <- createDataPartition(y = newData$DepDel15, p = 0.60, list = FALSE)
training <- newData[inTrain, ]
testing  <- newData[-inTrain, ]
#
modFit_glm <- train(DepDel15 ~., method = "glm", data = training,
family="binomial", na.action = na.omit)
glmPre <- predict(modFit_glm, newdata = testing)
newData <- dbGetQuery(mydb,  "select DepDel15, Month, DayofMonth, DayofWeek, Carrier, FlightNum,
CRSDepTime, CRSArrTime, Distance
from data1516
where Cancelled != 1 and Diverted != 1
and year = 2016 and month = 1;")
newData$DepDel15  <- as.character(newData$DepDel15)
newData$FlightNum <- as.character(newData$FlightNum)
library(caret)
inTrain  <- createDataPartition(y = newData$DepDel15, p = 0.60, list = FALSE)
training <- newData[inTrain, ]
testing  <- newData[-inTrain, ]
ptm <- proc.time()
modFit_glm <- train(DepDel15 ~., method = "glm", data = training,
family="binomial", na.action = na.omit)
glmPre <- predict(modFit_glm, newdata = testing)
proc.time() - ptm
newData$FlightNum <- as.numeric(newData$FlightNum)
library(caret)
inTrain  <- createDataPartition(y = newData$DepDel15, p = 0.60, list = FALSE)
training <- newData[inTrain, ]
testing  <- newData[-inTrain, ]
#
ptm <- proc.time()
modFit_glm <- train(DepDel15 ~., method = "glm", data = training,
family="binomial", na.action = na.omit)
glmPre <- predict(modFit_glm, newdata = testing)
proc.time() - ptm
warnings()
confusionMatrix(data=glmPre, testing$DepDel15)
newData <- dbGetQuery(mydb,  "select DepDel15, Month, DayofMonth, DayofWeek, Carrier,
CRSDepTime, CRSArrTime, Distance
from data1516
where Cancelled != 1 and Diverted != 1
and year = 2016 and month = 1;")
newData <- dbGetQuery(mydb,  "select DepDel15, Month, Carrier, FlightNum,
CRSDepTime, CRSArrTime, Distance
from data1516
where Cancelled != 1 and Diverted != 1
and year = 2016 and month = 1;")
newData$DepDel15  <- as.character(newData$DepDel15)
library(caret)
inTrain  <- createDataPartition(y = newData$DepDel15, p = 0.60, list = FALSE)
training <- newData[inTrain, ]
testing  <- newData[-inTrain, ]
#
ptm <- proc.time()
modFit_glm <- train(DepDel15 ~., method = "glm", data = training,
family="binomial", na.action = na.omit)
warnings()
glmPre <- predict(modFit_glm, newdata = testing)
proc.time() - ptm
confusionMatrix(data=glmPre, testing$DepDel15)
newData <- dbGetQuery(mydb,  "select DepDel15, Month, DayofMonth, DayofWeek, Carrier, FlightNum,
CRSDepTime, CRSArrTime, Distance
from data1516
where Cancelled != 1 and Diverted != 1
and year = 2016 and month = 1;")
newData$DepDel15  <- as.character(newData$DepDel15)
library(caret)
inTrain  <- createDataPartition(y = newData$DepDel15, p = 0.60, list = FALSE)
training <- newData[inTrain, ]
testing  <- newData[-inTrain, ]
ptm <- proc.time()
modFit_glm <- train(DepDel15 ~., method = "glm", data = training,
family="binomial", na.action = na.omit)
glmPre <- predict(modFit_glm, newdata = testing)
proc.time() - ptm
confusionMatrix(data=glmPre, testing$DepDel15)
<!-- - Build predictive models on subsets of the data (K-means clustering) -->
a$var <- c("CRSDepTime", "Month", "CarrierAS")
a <- data.frame()
a$var <- c("CRSDepTime", "Month", "CarrierAS")
c("CRSDepTime", "Month", "CarrierAS")
a <- c("CRSDepTime", "Month", "CarrierAS")
a
b$var <- a
a <- c("CRSDepTime", "Month", "CarrierAS", "CRSArrTime", "CarrierHA", "CarrierB6",
"CarrierNK", "CarrierDL", "CarrierOO", "Distance", "CarrierWN", "FlightNum",
"CarrierVX", "CarrierEV", "DayofMonth", "DestAirportID", "CarrierF9", "CarrierUA",
"DayofWeek", "OriginAirportID")
b <- c(100.000, 51.730, 34.685, 32.390, 27.722, 25.640, 24.244, 22.609, 17.425, 15.476, 9.096,
6.180, 5.950, 5.467, 5.305, 5.181, 3.975, 3.521, 1.100, 0.000)
d <- c(a,b)
d
d[,('features', 'overall')]  <- cbind(a,b)
rm(d)
d[,('features', 'overall')]  <- cbind(a,b)
d[,c('features', 'overall')]  <- cbind(a,b)
d  <- cbind(a,b)
d
install.packages("xtable")
library(knitr)
library(dplyr)
library(knitr)
library(DT)
library(xtable)\
library(dplyr)
library(knitr)
library(DT)
library(xtable)
install.packages("DT")
install.packages("DT")
library(dplyr)
library(knitr)
library(DT)
library(xtable)
library(dplyr)
library(knitr)
library(DT)
library(xtable)
?kable
install.packages("htmlTable")
library("pander")
pandoc.table(my_data, split.cells = 5)
install.packages("pander")
library("pander")
library("pander")
rm(d, a, b)
shiny::runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
<!-- # ```{r, echo = FALSE, message=FALSE} -->
shiny::runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
## Data
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
runApp('C:/Users/User/Dropbox/Data Science/Data Science_Jonhs Hopkins Courses/10. Capstone/Shiny App')
